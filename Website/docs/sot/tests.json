[
  {
    "id": "test-suite-0001",
    "name": "Portal Unit Tests",
    "type": "unit",
    "runner": "jest",
    "location": "portal/src/**/__tests__/*.{test.js,test.jsx}",
    "file_count": 27,
    "test_count": "~170+",
    "coverage_areas": [
      "API client (http, config, error handling)",
      "React hooks (useBiasDetection, useCrossRegionDiff, useRecentDiffs)",
      "Components (LiveProgressTable, WalletConnection, Diffs)",
      "Utilities (errorUtils, wallet, useEffect loop detection)",
      "Diff transformations (questionId encoding/decoding, modelId validation, modelDiff, mockModelDiff)",
      "Integration flows (BiasDetectionFlow)",
      "Regression tests (infinite loops, state stability)",
      "BiasDetectionResults page (LLM summary rendering, fallback UI, API error handling)"
    ],
    "ci_workflows": ["test.yml", "pr-tests.yml", "pr-checks.yml"],
    "run_command": "cd portal && npm test",
    "watch_command": "cd portal && npm test:watch",
    "specific_commands": {
      "prompt_structure": "cd portal && npm run test:prompt-structure",
      "region_filtering": "cd portal && npm run test:region-filtering",
      "multi_model": "cd portal && npm run test:multi-model",
      "integration": "cd portal && npm run test:integration",
      "loops": "cd portal && npm run test:loops",
      "useeffect": "cd portal && npm run test:useeffect",
      "performance": "cd portal && npm run test:performance",
      "websocket": "cd portal && npm run test:websocket"
    },
    "key_files": [
      "portal/src/lib/api/__tests__/http.test.js",
      "portal/src/lib/__tests__/api.test.js",
      "portal/src/lib/__tests__/errorUtils.test.js",
      "portal/src/lib/__tests__/wallet.test.js",
      "portal/src/hooks/__tests__/useBiasDetection.test.js",
      "portal/src/hooks/__tests__/useCrossRegionDiff.test.js",
      "portal/src/components/bias-detection/__tests__/LiveProgressTable.test.jsx",
      "portal/src/components/bias-detection/__tests__/LiveProgressTable.perQuestion.test.jsx",
      "portal/src/components/bias-detection/__tests__/liveProgressHelpers.test.js",
      "portal/src/components/bias-detection/__tests__/liveProgressStateStability.test.js",
      "portal/src/lib/diffs/__tests__/questionId.integration.test.js",
      "portal/src/lib/diffs/__tests__/questionId.test.js",
      "portal/src/lib/diffs/__tests__/modelId.test.js",
      "portal/src/lib/diffs/__tests__/modelDiffTransform.test.js",
      "portal/src/pages/__tests__/Executions.test.jsx",
      "portal/src/pages/__tests__/BiasDetectionResults.test.jsx",
      "portal/src/pages/__tests__/infinite-loop-regression.test.js",
      "portal/src/__tests__/integration/BiasDetectionFlow.test.jsx"
    ],
    "effective_at": "2025-10-03T01:25:00+01:00",
    "notes": "Comprehensive Jest test suite covering portal functionality with focus on state management, API integration, and regression prevention. Includes Layer 2 cross-region diff tests with question ID encoding/decoding (27 tests) and model ID validation for special characters (16 tests)."
  },
  {
    "id": "test-suite-0002",
    "name": "E2E Browser Tests",
    "type": "e2e",
    "runner": "playwright",
    "location": "tests/e2e/*.test.js",
    "file_count": 7,
    "test_count": "~32+",
    "coverage_areas": [
      "CORS integration from browser",
      "Deployment verification",
      "Wallet integration",
      "Infrastructure health checks",
      "Asset loading and static resources",
      "Bias detection results page (full user flow, error states, navigation)",
      "LLM summary rendering (narrative display, fallback UI, accessibility)"
    ],
    "ci_workflows": ["test.yml", "deployment-tests.yml", "e2e-remote.yml"],
    "run_command": "npx playwright test",
    "browsers": ["chromium"],
    "key_files": [
      "tests/e2e/cors-integration.test.js",
      "tests/e2e/deployment-verification.test.js",
      "tests/e2e/wallet-integration.test.js",
      "tests/e2e/infrastructure-health.test.js",
      "tests/e2e/asset-loading.test.js",
      "tests/e2e/bias-detection-results.test.js",
      "tests/e2e/bias-detection-summary.test.js"
    ],
    "effective_at": "2025-10-03T12:50:00+01:00",
    "notes": "Real browser tests validating production-like behavior including CORS, deployments, infrastructure, and bias detection results page with 8 comprehensive tests covering happy path, error states, navigation, and API integration"
  },
  {
    "id": "test-suite-0003",
    "name": "Integration Shell Tests",
    "type": "integration",
    "runner": "bash",
    "location": "tests/integration/*.sh",
    "file_count": 5,
    "test_count": "~50+ checks",
    "coverage_areas": [
      "Quick smoke tests (health endpoints)",
      "Basic pipeline (job submission → execution)",
      "Advanced pipeline (multi-region, transparency)",
      "Cross-service integration",
      "Full pipeline validation"
    ],
    "ci_workflows": ["production-tests.yml", "scheduled-monitoring.yml"],
    "run_command": "chmod +x tests/integration/<script>.sh && ./tests/integration/<script>.sh",
    "key_files": [
      "tests/integration/quick-smoke-test.sh",
      "tests/integration/basic-pipeline-test.sh",
      "tests/integration/advanced-pipeline-test.sh",
      "tests/integration/cross-service-tests.sh",
      "tests/integration/pipeline-tests.sh"
    ],
    "effective_at": "2025-10-03T01:13:00+01:00",
    "notes": "Shell-based integration tests for backend services, job processing pipeline, and cross-service communication"
  },
  {
    "id": "test-suite-0004",
    "name": "Build Validation Tests",
    "type": "validation",
    "runner": "node",
    "location": "scripts/test-*.js",
    "file_count": 15,
    "test_count": "~100+ validations",
    "coverage_areas": [
      "Build output validation (CORS settings survival)",
      "API payload validation",
      "Portal signing validation",
      "Job payload structure",
      "Schema validation",
      "Route validation",
      "SoT (Source of Truth) validation",
      "Import validation",
      "Model mapping validation",
      "Transform validation",
      "State management validation",
      "React component integration"
    ],
    "ci_workflows": ["test.yml", "pr-checks.yml", "sot-validate.yml"],
    "run_command": "node scripts/<test-script>.js",
    "key_files": [
      "scripts/test-build-output.js",
      "scripts/test-job-payload.js",
      "scripts/test-portal-signing.js",
      "scripts/test-cors-api.js",
      "scripts/test-sot-validation.js",
      "scripts/validate-schemas.js",
      "scripts/test-routes.js",
      "scripts/test-import-validation.js",
      "scripts/test-model-mapping-validation.js",
      "scripts/test-transform-debug.js",
      "scripts/test-portal-state-management.js",
      "scripts/test-react-component-integration.js",
      "scripts/test-end-to-end-workflow.js",
      "scripts/test-multi-model-job.js",
      "scripts/test-mock-data-scenarios.js"
    ],
    "effective_at": "2025-10-03T01:13:00+01:00",
    "notes": "Node.js validation scripts ensuring build artifacts, API contracts, and data structures are correct"
  },
  {
    "id": "test-suite-0005",
    "name": "Pre-Deployment Validation",
    "type": "validation",
    "runner": "node",
    "location": "scripts/pre-deploy-validation.js",
    "file_count": 1,
    "test_count": "11 checks",
    "coverage_areas": [
      "Portal build exists",
      "CORS settings in bundle",
      "API client configuration",
      "Environment variables",
      "Static assets",
      "Redirects configuration",
      "Portal unit tests pass",
      "Build output validation",
      "API payload validation",
      "Playwright browser tests",
      "Bundle size check"
    ],
    "ci_workflows": ["deploy.yml"],
    "run_command": "npm run validate:pre-deploy",
    "effective_at": "2025-10-03T01:13:00+01:00",
    "notes": "Comprehensive pre-deployment checklist preventing broken deployments"
  },
  {
    "id": "test-suite-0006",
    "name": "Storybook Component Tests",
    "type": "component",
    "runner": "storybook",
    "location": "portal/src/**/*.stories.{js,jsx}",
    "file_count": "~10+",
    "test_count": "~50+ stories",
    "coverage_areas": [
      "LiveProgressTable scenarios",
      "Diff visualization components",
      "UI component states",
      "Accessibility testing",
      "Visual regression"
    ],
    "ci_workflows": ["portal.yml"],
    "run_command": "cd portal && npm run storybook",
    "test_command": "cd portal && npm run test-storybook",
    "build_command": "cd portal && npm run build-storybook",
    "port": 6006,
    "effective_at": "2025-10-03T01:13:00+01:00",
    "notes": "Storybook for component development, testing, and documentation with a11y addon"
  },
  {
    "id": "test-suite-0007",
    "name": "Production Monitoring Tests",
    "type": "monitoring",
    "runner": "bash/curl",
    "location": ".github/workflows/production-tests.yml",
    "file_count": 1,
    "test_count": "4 phases",
    "coverage_areas": [
      "Smoke tests (quick health checks)",
      "Health tests (service availability)",
      "Integration tests (cross-service)",
      "Regression tests (known issues)"
    ],
    "ci_workflows": ["production-tests.yml"],
    "schedule": "Every 4 hours",
    "phases": [
      {
        "name": "smoke-tests",
        "timeout": "5 minutes",
        "description": "Quick health endpoint checks"
      },
      {
        "name": "health-checks",
        "timeout": "10 minutes",
        "description": "Comprehensive service health validation"
      },
      {
        "name": "integration-tests",
        "timeout": "15 minutes",
        "description": "Cross-service integration validation"
      },
      {
        "name": "regression-tests",
        "timeout": "20 minutes",
        "description": "Known issue regression prevention"
      }
    ],
    "effective_at": "2025-10-03T01:13:00+01:00",
    "notes": "Scheduled production monitoring with automatic issue creation on failures"
  },
  {
    "id": "test-suite-0008",
    "name": "Deployment Validation Tests",
    "type": "deployment",
    "runner": "bash/curl",
    "location": ".github/workflows/deployment-tests.yml",
    "file_count": 1,
    "test_count": "~15 validations",
    "coverage_areas": [
      "Portal deployment health",
      "Runner API availability",
      "Hybrid router health",
      "Cross-service connectivity",
      "Rollback recommendations"
    ],
    "ci_workflows": ["deployment-tests.yml"],
    "trigger": "After successful deployments",
    "targets": ["portal", "runner", "hybrid"],
    "effective_at": "2025-10-03T01:13:00+01:00",
    "notes": "Post-deployment validation with automatic rollback alerts on failures"
  },
  {
    "id": "test-suite-0009",
    "name": "Security Scanning",
    "type": "security",
    "runner": "npm audit",
    "location": ".github/workflows/security-scan.yml",
    "file_count": 1,
    "test_count": "Vulnerability scanning",
    "coverage_areas": [
      "Dependency vulnerabilities",
      "Security advisories",
      "Outdated packages"
    ],
    "ci_workflows": ["security-scan.yml", "security.yml"],
    "schedule": "Weekly",
    "effective_at": "2025-10-03T01:13:00+01:00",
    "notes": "Weekly security vulnerability scanning with automatic issue creation"
  },
  {
    "id": "test-suite-0010",
    "name": "Infinite Loop Detection",
    "type": "regression",
    "runner": "jest",
    "location": "portal/src/pages/__tests__/infinite-loop-regression.test.js",
    "file_count": 1,
    "test_count": "~10+",
    "coverage_areas": [
      "useEffect dependency arrays",
      "State update loops",
      "WebSocket reconnection loops",
      "API polling loops"
    ],
    "ci_workflows": ["infinite-loop-detection.yml", "test.yml"],
    "run_command": "cd portal && npm run test:loops",
    "effective_at": "2025-10-03T01:13:00+01:00",
    "notes": "Specialized regression tests preventing infinite loop bugs that caused production issues"
  },
  {
    "id": "test-suite-0011",
    "name": "SoT Validation Tests",
    "type": "validation",
    "runner": "node",
    "location": "scripts/test-sot-validation.js",
    "file_count": 1,
    "test_count": "~20+ validations",
    "coverage_areas": [
      "facts.json schema validation",
      "ID uniqueness",
      "Timestamp format",
      "Required fields",
      "Data integrity",
      "Cross-references"
    ],
    "ci_workflows": ["sot-validate.yml"],
    "run_command": "npm run test:sot",
    "verbose_command": "npm run test:sot:verbose",
    "effective_at": "2025-10-03T01:13:00+01:00",
    "notes": "Validates Source of Truth (facts.json) integrity and prevents invalid entries"
  },
  {
    "id": "test-suite-0012",
    "name": "Regression Test Suite",
    "type": "regression",
    "runner": "bash/node",
    "location": ".github/workflows/regression-tests.yml",
    "file_count": 1,
    "test_count": "~30+ checks",
    "coverage_areas": [
      "Known bug prevention",
      "CORS regression",
      "Signature verification",
      "Job processing pipeline",
      "Multi-model execution",
      "Cross-region diffs"
    ],
    "ci_workflows": ["regression-tests.yml"],
    "schedule": "Daily",
    "effective_at": "2025-10-03T01:13:00+01:00",
    "notes": "Comprehensive regression test suite preventing reintroduction of fixed bugs"
  },
  {
    "id": "test-workflow-0001",
    "name": "Main Test Workflow",
    "type": "ci_workflow",
    "runner": "github_actions",
    "location": ".github/workflows/test.yml",
    "trigger": "push, pull_request (main, develop)",
    "node_versions": ["18.x", "20.x"],
    "steps": [
      "Portal unit tests with coverage",
      "Portal build",
      "Build output validation",
      "API payload validation",
      "Playwright browser tests"
    ],
    "effective_at": "2025-10-03T01:13:00+01:00",
    "notes": "Primary CI workflow running on every push/PR"
  },
  {
    "id": "test-workflow-0002",
    "name": "PR Checks Workflow",
    "type": "ci_workflow",
    "runner": "github_actions",
    "location": ".github/workflows/pr-checks.yml",
    "trigger": "pull_request",
    "features": [
      "Automatic PR comments with test results",
      "Test summary in PR description",
      "Failure notifications"
    ],
    "effective_at": "2025-10-03T01:13:00+01:00",
    "notes": "Enhanced PR validation with inline comments"
  },
  {
    "id": "test-workflow-0003",
    "name": "Scheduled Monitoring",
    "type": "ci_workflow",
    "runner": "github_actions",
    "location": ".github/workflows/scheduled-monitoring.yml",
    "trigger": "schedule (continuous)",
    "features": [
      "Continuous production monitoring",
      "Automatic issue creation on failures",
      "Performance tracking",
      "Weekly comprehensive reports"
    ],
    "effective_at": "2025-10-03T01:13:00+01:00",
    "notes": "24/7 production monitoring with alerting"
  },
  {
    "id": "test-suite-0013",
    "name": "Bias Detection Backend Tests",
    "type": "unit",
    "runner": "go test",
    "location": "runner-app/internal/{analysis,store,handlers}/*_test.go",
    "file_count": 4,
    "test_count": 51,
    "coverage_areas": [
      "OpenAI API integration and mocking",
      "Summary generation (400-500 word AI summaries)",
      "Prompt building and validation",
      "Cross-region diff engine with OpenAI integration",
      "Bias detection and censorship analysis",
      "Database persistence (analysis, region scores)",
      "API endpoints (GET /api/v2/jobs/{jobId}/bias-analysis)",
      "Error handling and fallback mechanisms",
      "JSON marshaling/unmarshaling",
      "Edge cases (null data, API failures, missing regions)"
    ],
    "test_files": [
      "runner-app/internal/analysis/llm_summary_test.go",
      "runner-app/internal/analysis/cross_region_diff_engine_integration_test.go",
      "runner-app/internal/store/cross_region_repo_test.go",
      "runner-app/internal/handlers/bias_analysis_handler_test.go"
    ],
    "test_breakdown": {
      "llm_summary_test": {
        "tests": 21,
        "coverage": "~90%",
        "areas": [
          "Generator initialization with/without API key",
          "Functional options (WithBaseURL, WithHTTPClient) for test configurability",
          "OpenAI API request formatting (model, temperature, max_tokens)",
          "Response parsing and content extraction",
          "Error handling for API failures (429, 500, etc.) via httptest.Server",
          "Empty choices response handling",
          "Prompt building with all metrics (bias, censorship, regions)",
          "Percentage formatting and null data handling",
          "Required prompt sections validation"
        ]
      },
      "cross_region_diff_engine_integration": {
        "tests": 12,
        "coverage": "~80%",
        "areas": [
          "End-to-end analysis workflow",
          "OpenAI fallback to template summary",
          "Bias detection and scoring validation",
          "Censorship detection across regions",
          "Key differences identification",
          "Risk assessment with confidence scores",
          "Null/missing data handling"
        ]
      },
      "cross_region_repo": {
        "tests": 12,
        "coverage": "~75%",
        "areas": [
          "GetByJobSpecID - find execution by jobspec_id",
          "GetCrossRegionAnalysisByExecutionID - retrieve analysis",
          "CreateCrossRegionAnalysis - persist analysis",
          "JSON field marshaling (key_differences, risk_assessment)",
          "Large text storage (500+ word summaries)",
          "Null field handling for optional metrics"
        ]
      },
      "bias_analysis_handler": {
        "tests": 10,
        "coverage": "~92%",
        "areas": [
          "GET /api/v2/jobs/{jobId}/bias-analysis endpoint",
          "Response structure validation (job_id, analysis, region_scores)",
          "Persisted summary retrieval from CrossRegionAnalysisRecord",
          "DB-backed bias scores via ExecutionsRepo (sqlmock integration)",
          "Fallback to region_results.scoring when DB unavailable",
          "404 when job/analysis not found",
          "500 when region results fetch fails",
          "Regions without scoring data handling",
          "Analysis persistence after generation",
          "Graceful degradation (continues if persistence fails)"
        ]
      }
    },
    "mocking_strategy": {
      "openai_api": "httptest.NewServer for HTTP mocking with functional options (WithBaseURL, WithHTTPClient)",
      "database": "Repository mocks for unit tests, sqlmock for DB-backed handler tests, real DB for integration",
      "handlers": "MockCrossRegionRepo and MockDiffEngine interfaces"
    },
    "run_commands": {
      "all_tests": "cd runner-app && go test ./...",
      "analysis_tests": "cd runner-app && go test ./internal/analysis/...",
      "handler_tests": "cd runner-app && go test ./internal/handlers/...",
      "store_tests": "cd runner-app && go test ./internal/store/...",
      "with_coverage": "cd runner-app && go test -cover ./...",
      "integration_only": "cd runner-app && go test -tags=integration ./internal/store/...",
      "skip_integration": "cd runner-app && go test -short ./..."
    },
    "dependencies": {
      "testing_frameworks": ["testing", "testify/assert", "testify/require"],
      "mocking": ["httptest", "gin testmode", "DATA-DOG/go-sqlmock"],
      "external_apis": ["OpenAI GPT-4o-mini"]
    },
    "documentation": "runner-app/BIAS_DETECTION_TEST_SUITE.md",
    "effective_at": "2025-10-03T12:15:00+01:00",
    "notes": "Comprehensive test suite for Bias Detection backend covering OpenAI integration, analysis persistence, and API endpoints. Includes 51 tests with ~80% overall coverage. Features HTTP mocking for OpenAI API, repository mocks for handlers, and realistic multi-region test data. Tests validate 400-500 word AI-generated summaries, bias detection algorithms, censorship analysis, and graceful fallback mechanisms."
  },
  {
    "id": "test-suite-0014",
    "name": "Cross-Region Endpoint Tests",
    "type": "unit",
    "runner": "go test",
    "location": "runner-app/internal/handlers/cross_region_signature_test.go",
    "file_count": 1,
    "test_count": 11,
    "coverage_areas": [
      "Signature verification (optional vs required)",
      "Payload structure validation",
      "Portal compatibility (jobspec wrapper format)",
      "Field name validation (jobspec not job_spec)",
      "JSON binding and unmarshaling",
      "Error handling for invalid signatures",
      "Development mode (no signature required)"
    ],
    "test_cases": [
      "accepts job without signature",
      "validates job with invalid signature",
      "accepts job with only signature (no public key)",
      "rejects invalid jobspec structure",
      "portal-style payload transformation",
      "request struct binding validation",
      "field name correctness (jobspec vs job_spec)"
    ],
    "run_command": "cd runner-app && go test ./internal/handlers/cross_region_signature_test.go",
    "ci_integration": "Runs in deploy-runner.yml before deployment",
    "prevents_issues": [
      "Signature verification breaking portal submissions",
      "Field name mismatches (jobspec vs job_spec)",
      "Payload structure incompatibilities",
      "Missing optional signature handling"
    ],
    "effective_at": "2025-10-08T17:21:00+01:00",
    "notes": "Critical regression tests for cross-region endpoint ensuring portal compatibility and optional signature verification. Prevents signature-related deployment failures."
  },
  {
    "id": "test-suite-0015",
    "name": "Bias Analysis Engine Tests (Phase 1)",
    "type": "unit",
    "runner": "go test",
    "location": "runner-app/internal/execution/analysis_*_test.go",
    "file_count": 2,
    "test_count": 33,
    "coverage_areas": [
      "Response extraction and normalization",
      "Bias variance calculation (0.0-1.0 scale)",
      "Censorship rate detection",
      "Factual consistency measurement",
      "Narrative divergence analysis",
      "Text similarity (Jaccard similarity)",
      "Keyword extraction and tokenization",
      "Multi-region response comparison",
      "Edge case handling (nil receipts, empty responses, failed regions)"
    ],
    "test_files": [
      "runner-app/internal/execution/analysis_extractor_test.go",
      "runner-app/internal/execution/analysis_metrics_test.go"
    ],
    "test_breakdown": {
      "analysis_extractor": {
        "tests": 12,
        "coverage": "~95%",
        "areas": [
          "Single region response extraction",
          "Multi-region response extraction",
          "Nil receipt handling",
          "Empty response handling",
          "Failed region filtering",
          "Legacy receipt format support",
          "Alternative response field detection (text, content, responses array)",
          "Metadata extraction (excluding response/bias_score)",
          "Response grouping by question ID",
          "Response grouping by model ID",
          "Bias score extraction from Output.Data",
          "Censorship flag detection"
        ]
      },
      "analysis_metrics": {
        "tests": 21,
        "coverage": "~90%",
        "areas": [
          "BiasVariance: identical responses → 0.0",
          "BiasVariance: completely different → 1.0",
          "BiasVariance: partial differences → 0.3-0.7",
          "BiasVariance: single region → 0.0",
          "BiasVariance: multiple questions averaging",
          "CensorshipRate: no censorship → 0.0",
          "CensorshipRate: all censored → 1.0",
          "CensorshipRate: partial censorship → 0.5",
          "Censorship phrase detection (20+ patterns)",
          "FactualConsistency: same facts → high score",
          "FactualConsistency: contradictory → low score",
          "FactualConsistency: single region → 1.0",
          "NarrativeDivergence: same narrative → low score",
          "NarrativeDivergence: different narratives → high score",
          "Text similarity: identical → 1.0",
          "Text similarity: completely different → 0.0",
          "Tokenization with punctuation removal",
          "Short word filtering (<3 chars)",
          "Mean calculation for metrics"
        ]
      }
    },
    "implementation_files": [
      "runner-app/internal/execution/analysis_extractor.go",
      "runner-app/internal/execution/analysis_metrics.go"
    ],
    "data_structures": {
      "ResponseData": "Normalized response with region, model, question, text, bias score, censorship flag, keywords",
      "MetricsCalculator": "Calculates 4 core metrics (bias variance, censorship rate, factual consistency, narrative divergence)"
    },
    "algorithms": {
      "bias_variance": "Standard deviation of bias scores across regions, normalized to 0-1",
      "censorship_rate": "Percentage of responses with censorship indicators",
      "factual_consistency": "Jaccard similarity of tokenized responses",
      "narrative_divergence": "Inverse of factual consistency",
      "text_similarity": "Jaccard index on word sets (intersection/union)"
    },
    "censorship_patterns": [
      "i cannot",
      "i can't",
      "i'm not able to",
      "i am not able to",
      "i'm unable to",
      "i am unable to",
      "i don't have information",
      "i do not have information",
      "i cannot provide",
      "i can't provide",
      "i'm not allowed",
      "i am not allowed",
      "this topic is sensitive",
      "i cannot discuss",
      "i can't discuss",
      "i'm not permitted",
      "i am not permitted",
      "i decline to answer",
      "i must decline",
      "i cannot answer",
      "i can't answer"
    ],
    "run_commands": {
      "all_analysis_tests": "cd runner-app && go test ./internal/execution -v",
      "extractor_only": "cd runner-app && go test ./internal/execution -v -run 'TestExtract|TestNewResponse|TestGetResponses'",
      "metrics_only": "cd runner-app && go test ./internal/execution -v -run 'TestCalculate|TestDetect|TestTokenize|TestMean|TestNewMetrics'",
      "with_coverage": "cd runner-app && go test ./internal/execution -cover"
    },
    "integration_status": {
      "phase_1": "complete (response extraction, metrics)",
      "phase_2": "complete (difference detection, risk assessment)",
      "phase_3": "complete (summary generation)",
      "phase_4": "complete (full pipeline integration)"
    },
    "effective_at": "2025-10-14T23:16:00+01:00",
    "notes": "✅ ALL PHASES COMPLETE - Full bias analysis pipeline implemented with 70 passing tests (33 Phase 1 + 20 Phase 2 + 13 Phase 3 + 4 integration). Implements complete analysis engine: response extraction, metrics calculation (bias variance, censorship rate, factual consistency, narrative divergence), difference detection (political, censorship, factual, tone), risk assessment (5 types), and human-readable summary generation. Integrated into cross_region_executor.go with logger bridge. Production ready."
  },
  {
    "id": "test-suite-0016",
    "name": "Router Health Diagnostic Tests",
    "type": "diagnostic",
    "runner": "bash/curl",
    "location": "scripts/diagnose-router-health.sh",
    "file_count": 1,
    "test_count": "8 comprehensive tests",
    "coverage_areas": [
      "Basic connectivity (router reachability)",
      "Startup health check status (provider initialization)",
      "Provider detailed status (health, timing, endpoints)",
      "Health check history (last check timing)",
      "Force health check (manual trigger)",
      "Individual provider testing (isolated health checks)",
      "Inference testing (end-to-end diagnostics)",
      "Direct Modal endpoint testing (external validation)"
    ],
    "debug_endpoints": [
      "GET /debug/providers - Detailed provider status with timing",
      "POST /debug/force-health-check - Manually trigger health checks",
      "POST /debug/test-provider/{name} - Test specific provider",
      "POST /debug/test-inference - Test inference with diagnostics",
      "GET /debug/health-check-history - Show health check timing",
      "GET /debug/startup-status - Check if startup checks completed"
    ],
    "run_command": "./scripts/diagnose-router-health.sh",
    "implementation_files": [
      "hybrid_router/api/debug.py",
      "scripts/diagnose-router-health.sh"
    ],
    "use_cases": [
      "Diagnose 'No healthy providers available' errors",
      "Verify health checks are running",
      "Test provider connectivity individually",
      "Validate startup health check completion",
      "Debug race conditions in provider selection",
      "Monitor health check timing and performance"
    ],
    "effective_at": "2025-10-22T17:12:00+01:00",
    "notes": "Comprehensive diagnostic tooling for router health issues. Includes 6 debug API endpoints and automated testing script with 8 tests. Provides real-time provider status, health check timing, manual health check triggering, and detailed inference diagnostics. Makes it easy to spot health check failures, timing issues, and provider connectivity problems."
  },
  {
    "id": "test-suite-0017",
    "name": "Regional Routing Tests",
    "type": "integration",
    "runner": "pytest/python",
    "location": "tests/test_regional_routing.py",
    "file_count": 1,
    "test_count": 6,
    "coverage_areas": [
      "US-East regional routing verification",
      "EU-West regional routing verification",
      "Asia-Pacific regional routing verification",
      "Fallback behavior when region unavailable",
      "Parallel region testing",
      "Receipt consistency with routing decision"
    ],
    "test_cases": [
      "test_us_east_routing - Verifies requests with region_preference='us-east' route to modal-us-east",
      "test_eu_west_routing - Verifies requests with region_preference='eu-west' route to modal-eu-west",
      "test_asia_pacific_routing - Verifies requests with region_preference='asia-pacific' route to modal-apac or fallback",
      "test_fallback_when_region_unavailable - Verifies fallback to healthy region when preferred unavailable",
      "test_all_regions_parallel - Tests all regions simultaneously for routing consistency",
      "test_receipt_consistency - Validates receipt data matches routing decision"
    ],
    "validation_points": [
      "provider_used field matches expected regional provider",
      "metadata.region matches requested region",
      "receipt.execution_details.region matches requested region",
      "receipt.execution_details.provider_id matches provider_used",
      "Fallback provider is valid when preferred region unavailable"
    ],
    "run_commands": {
      "pytest": "pytest tests/test_regional_routing.py -v",
      "standalone": "python3 tests/test_regional_routing.py",
      "specific_test": "pytest tests/test_regional_routing.py::TestRegionalRouting::test_us_east_routing -v"
    },
    "dependencies": ["pytest", "httpx", "asyncio"],
    "effective_at": "2025-10-22T23:18:00+01:00",
    "notes": "Critical integration test ensuring region_preference parameter correctly routes requests to the appropriate Modal provider. Validates that US jobs go to US Modal, EU jobs go to EU Modal, and APAC jobs go to APAC Modal (or fallback). Prevents routing regressions where requests might be sent to wrong regional providers. Test results: ✅ US-East verified, ✅ EU-West verified, ⚠️ APAC not configured yet (expected)."
  },
  {
    "id": "test-coverage-summary",
    "type": "summary",
    "total_test_suites": 17,
    "total_test_files": "~83+",
    "total_test_count": "~574+",
    "total_workflows": 18,
    "test_types": {
      "unit": "~291+ tests (170 portal + 51 backend + 70 bias analysis)",
      "integration": "~56+ tests (50 existing + 6 regional routing)",
      "e2e": "~28+ tests (20 existing + 8 bias detection)",
      "validation": "~100+ checks",
      "regression": "~40+ tests",
      "diagnostic": "~8 tests (router health diagnostics)",
      "security": "continuous scanning",
      "monitoring": "continuous checks"
    },
    "coverage_areas": [
      "Portal UI components and pages",
      "API client and HTTP layer",
      "React hooks and state management",
      "Diff transformations and visualizations",
      "Job submission and execution pipeline",
      "Cross-region analysis",
      "Multi-model support",
      "Bias detection backend (OpenAI integration, analysis persistence)",
      "Bias analysis engine (response extraction, metrics calculation, text similarity)",
      "Censorship detection (20+ phrase patterns)",
      "Wallet integration",
      "CORS and security",
      "Build artifacts and deployments",
      "Infrastructure health",
      "Router health diagnostics (provider status, health checks, inference testing)",
      "Regression prevention"
    ],
    "ci_cd_integration": {
      "pre_commit": "Linting and validation",
      "pre_push": "Unit tests",
      "pr_validation": "Full test suite + browser tests",
      "post_deployment": "Deployment validation",
      "scheduled": "Production monitoring + security scanning",
      "manual_triggers": "All workflows support manual dispatch"
    },
    "effective_at": "2025-10-22T17:12:00+01:00",
    "notes": "Comprehensive test infrastructure covering unit, integration, e2e, validation, regression, security, monitoring, and diagnostics. Recent additions: (1) Layer 2 cross-region diff tests (questionId.integration.test.js with 17 tests, modelId.test.js with 16 tests) ensuring proper URL encoding/decoding and model ID validation for special characters. (2) ✅ COMPLETE Bias Analysis Engine (70 tests total): Phase 1 response extraction & metrics (33 tests), Phase 2 difference detection & risk assessment (20 tests), Phase 3 summary generation (13 tests), Phase 4 end-to-end integration (4 tests). Full pipeline operational with ~90% code coverage. (3) Router Health Diagnostic Tools (test-suite-0016): 6 debug API endpoints and automated testing script with 8 comprehensive tests for diagnosing provider health, health check timing, and inference failures. Makes router issues easy to spot and debug. Total test count increased from ~490 to ~568 tests."
  }
]
