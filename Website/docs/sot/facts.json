[
  {
    "id": "srv-0001",
    "action": "add",
    "type": "server",
    "subject": "runner",
    "env": "prod",
    "data": {
      "name": "fly-runner",
      "url": "https://beacon-runner-change-me.fly.dev",
      "provider": "fly.io",
      "region": "iad"
    },
    "effective_at": "2025-09-25T23:36:09+01:00",
    "notes": "Primary Runner API"
  },
  {
    "id": "srv-0002",
    "action": "add",
    "type": "server",
    "subject": "router",
    "env": "prod",
    "data": {
      "name": "railway-router",
      "url": "https://project-beacon-production.up.railway.app",
      "provider": "railway",
      "region": "iad"
    },
    "effective_at": "2025-09-20T17:14:26+01:00",
    "notes": "Hybrid router (provider discovery only). Not full Runner API."
  },
  {
    "id": "prt-0001",
    "action": "add",
    "type": "port",
    "subject": "runner",
    "env": "local",
    "data": {
      "port": 8090,
      "protocol": "http"
    },
    "effective_at": "2025-09-20T17:14:26+01:00",
    "notes": "Runner local default"
  },
  {
    "id": "trm-0001",
    "action": "add",
    "type": "terminal",
    "subject": "A",
    "env": "local",
    "data": {
      "purpose": "Yagna daemon",
      "default_port": 7465
    },
    "effective_at": "2025-09-20T17:14:26+01:00",
    "notes": "Terminal mapping"
  },
  {
    "id": "trm-0002",
    "action": "add",
    "type": "terminal",
    "subject": "B",
    "env": "local",
    "data": {
      "purpose": "Go API server",
      "default_port": 8090
    },
    "effective_at": "2025-09-20T17:14:26+01:00",
    "notes": "Terminal mapping"
  },
  {
    "id": "trm-0003",
    "action": "add",
    "type": "terminal",
    "subject": "C",
    "env": "local",
    "data": {
      "purpose": "Actions (curl, tests)",
      "default_port": 8787
    },
    "effective_at": "2025-09-20T17:14:26+01:00",
    "notes": "Terminal mapping"
  },
  {
    "id": "trm-0004",
    "action": "add",
    "type": "terminal",
    "subject": "D",
    "env": "local",
    "data": {
      "purpose": "Postgres + Redis (docker compose)",
      "default_port": 8787
    },
    "effective_at": "2025-09-20T17:14:26+01:00",
    "notes": "Terminal mapping"
  },
  {
    "id": "trm-0005",
    "action": "add",
    "type": "terminal",
    "subject": "E",
    "env": "local",
    "data": {
      "purpose": "Fly/Upstash/Neon (cloud infra ops)",
      "default_port": 8787
    },
    "effective_at": "2025-09-20T17:14:26+01:00",
    "notes": "Terminal mapping"
  },
  {
    "id": "rte-0001",
    "action": "add",
    "type": "routing_policy",
    "subject": "redirects",
    "env": "all",
    "data": {
      "source_of_truth": "dist/_redirects",
      "generator": "scripts/write-redirects.js",
      "verification": "scripts/verify-redirects.js",
      "netlify_toml_redirects": "prohibited (use only for build/env/headers)",
      "order": [
        "backend-diffs: /backend-diffs/health -> Railway 200!",
        "backend-diffs: /backend-diffs/* -> Railway 200!",
        "api: /api/v1/* -> Runner 200!",
        "health: /health -> Runner 200!",
        "hybrid: /hybrid/* -> Hybrid Router 200!",
        "ws: /ws, /ws/* -> Hybrid Router 200!",
        "docs: /docs/*, /docs -> /docs/index.html 200",
        "portal assets: /portal/assets/* -> passthrough 200",
        "portal spa: /portal/*, /portal -> /portal/index.html 200",
        "demo: /demo-results/* -> passthrough 200"
      ],
      "env_params": {
        "REDIRECT_DIFFS_BASE": "https://backend-diffs-production.up.railway.app",
        "REDIRECT_RUNNER_BASE": "https://beacon-runner-change-me.fly.dev",
        "REDIRECT_HYBRID_BASE": "https://project-beacon-production.up.railway.app"
      }
    },
    "effective_at": "2025-09-20T17:55:07+01:00",
    "notes": "Single source of truth for redirects and SPA fallbacks lives in dist/_redirects. Use env-param bases for proxies."
  },
  {
    "id": "trm-0006",
    "action": "add",
    "type": "terminal",
    "subject": "F",
    "env": "local",
    "data": {
      "purpose": "Vite dev server",
      "default_port": 8787
    },
    "effective_at": "2025-09-20T18:09:36+01:00",
    "notes": "Terminal mapping"
  },
  {
    "id": "trm-0007",
    "action": "add",
    "type": "terminal",
    "subject": "H",
    "env": "local",
    "data": {
      "purpose": "Mock backend",
      "default_port": 8787
    },
    "effective_at": "2025-09-20T18:09:36+01:00",
    "notes": "Terminal mapping"
  },
  {
    "id": "dpr-0001",
    "action": "deprecate",
    "type": "terminal",
    "subject": "C",
    "env": "local",
    "data": {
      "reason": "Terminal C is a general action shell; no default port",
      "supersedes": "trm-0003"
    },
    "effective_at": "2025-09-20T18:09:36+01:00",
    "notes": "Correcting earlier entry"
  },
  {
    "id": "trm-0008",
    "action": "add",
    "type": "terminal",
    "subject": "C",
    "env": "local",
    "data": {
      "purpose": "Actions (curl, tests)"
    },
    "effective_at": "2025-09-20T18:09:36+01:00",
    "notes": "Terminal mapping (no default port)"
  },
  {
    "id": "dpr-0002",
    "action": "deprecate",
    "type": "terminal",
    "subject": "D",
    "env": "local",
    "data": {
      "reason": "Terminal D controls services with multiple ports; default port 8787 was inaccurate",
      "supersedes": "trm-0004"
    },
    "effective_at": "2025-09-20T18:09:36+01:00",
    "notes": "Correcting earlier entry"
  },
  {
    "id": "trm-0009",
    "action": "add",
    "type": "terminal",
    "subject": "D",
    "env": "local",
    "data": {
      "purpose": "Postgres + Redis (docker compose)",
      "ports": { "postgres": 5432, "redis": 6379 }
    },
    "effective_at": "2025-09-20T18:09:36+01:00",
    "notes": "Terminal mapping with explicit service ports"
  },
  {
    "id": "dpr-0003",
    "action": "deprecate",
    "type": "terminal",
    "subject": "E",
    "env": "local",
    "data": {
      "reason": "Terminal E is cloud infra ops; no default port",
      "supersedes": "trm-0005"
    },
    "effective_at": "2025-09-20T18:09:36+01:00",
    "notes": "Correcting earlier entry"
  },
  {
    "id": "trm-0010",
    "action": "add",
    "type": "terminal",
    "subject": "E",
    "env": "local",
    "data": {
      "purpose": "Fly/Upstash/Neon (cloud infra ops)"
    },
    "effective_at": "2025-09-20T18:09:36+01:00",
    "notes": "Terminal mapping (no default port)"
  },
  {
    "id": "git-0001",
    "action": "add",
    "type": "git_structure",
    "subject": "local",
    "env": "local",
    "data": {
      "path": "/Users/Jammie/Desktop/Project Beacon/Website",
      "structure": "monorepo",
      "subdirs": ["portal/", "backend/", "runner-app/", "docs/", "scripts/", ".github/"],
      "deployment_targets": {
        "portal": "netlify",
        "backend": "railway", 
        "runner-app": "fly.io"
      }
    },
    "effective_at": "2025-09-20T18:13:40+01:00",
    "notes": "Local git structure - monorepo with multiple deployment targets"
  },
  {
    "id": "git-0002",
    "action": "add",
    "type": "git_structure",
    "subject": "github",
    "env": "prod",
    "data": {
      "repo": "jamie-anson/Project-Beacon",
      "url": "https://github.com/jamie-anson/Project-Beacon",
      "branch_strategy": "main + feature branches",
      "ci_cd": "github_actions",
      "workflows": ["deploy.yml", "sot-validate.yml", "test.yml", "e2e-remote.yml"]
    },
    "effective_at": "2025-09-20T18:13:40+01:00",
    "notes": "GitHub repo structure and CI/CD configuration"
  },
  {
    "id": "api-0001",
    "action": "add",
    "type": "api_base",
    "subject": "runner",
    "env": "prod",
    "data": {
      "base_url": "https://beacon-runner-change-me.fly.dev",
      "api_prefix": "/api/v1",
      "endpoints": [
        "GET /health",
        "POST /jobs",
        "GET /jobs/:id",
        "GET /executions",
        "GET /executions/:id", 
        "GET /questions",
        "GET /transparency/root",
        "GET /transparency/proof/:id",
        "GET /ws (websocket)"
      ]
    }
    ,
    "effective_at": "2025-09-25T23:36:09+01:00",
    "notes": "Runner API endpoints"
  },
  {
    "id": "api-0002",
    "action": "add",
    "type": "api_base",
    "subject": "router",
    "env": "prod",
    "data": {
      "base_url": "https://project-beacon-production.up.railway.app",
      "api_prefix": "/",
      "endpoints": [
        "GET /health",
        "GET /providers",
        "POST /inference",
        "GET /ws (websocket)"
      ]
    },
    "effective_at": "2025-09-20T18:13:40+01:00",
    "notes": "Hybrid router API endpoints (provider discovery only)"
  },
  {
    "id": "flg-0001",
    "action": "add",
    "type": "flags",
    "subject": "runner",
    "env": "all",
    "data": {
      "environment_vars": [
        "PORT (default: 8090)",
        "DATABASE_URL",
        "REDIS_URL", 
        "TRUSTED_KEYS_FILE",
        "ADMIN_TOKENS",
        "GOLEM_YAGNA_APPKEY",
        "HYBRID_ROUTER_URL"
      ],
      "feature_flags": [
        "ENABLE_SIGNATURE_VERIFICATION (default: true)",
        "ENABLE_TRUST_POLICY (default: true)",
        "ENABLE_WEBSOCKETS (default: true)"
      ]
    },
    "effective_at": "2025-09-20T18:13:40+01:00",
    "notes": "Runner service configuration flags"
  },
  {
    "id": "flg-0002",
    "action": "add",
    "type": "flags",
    "subject": "portal",
    "env": "all",
    "data": {
      "build_vars": [
        "VITE_API_BASE (default: /api/v1)",
        "VITE_WS_BASE (default: /ws)",
        "VITE_GOOGLE_MAPS_API_KEY",
        "VITE_ENABLE_WS (default: false)",
        "VITE_ENABLE_IDEMPOTENCY (default: false)"
      ],
      "runtime_flags": [
        "localStorage: beacon:enable_ws",
        "localStorage: beacon:enable_idempotency"
      ]
    },
    "effective_at": "2025-09-20T18:13:40+01:00",
    "notes": "Portal build and runtime configuration flags"
  },
  {
    "id": "flg-0003",
    "action": "add",
    "type": "flags",
    "subject": "router",
    "env": "all",
    "data": {
      "environment_vars": [
        "PORT (default: 8080)",
        "MODAL_US_URL",
        "MODAL_EU_URL", 
        "MODAL_APAC_URL",
        "RUNPOD_US_URL",
        "RUNPOD_EU_URL",
        "RUNPOD_APAC_URL"
      ],
      "feature_flags": [
        "ENABLE_WEBSOCKETS (default: true)",
        "ENABLE_CORS (default: true)"
      ]
    },
    "effective_at": "2025-09-20T18:13:40+01:00",
    "notes": "Hybrid router configuration flags"
  },
  {
    "id": "db-0001",
    "action": "add",
    "type": "database_schema",
    "subject": "runner",
    "env": "all",
    "data": {
      "tables": ["jobs", "executions", "outbox", "idempotency_keys"],
      "key_fields": {
        "jobs": "id (uuid), status, jobspec_hash",
        "executions": "id (serial), job_id, region, status, model_id",
        "outbox": "id (serial), payload, processed_at",
        "idempotency_keys": "key (varchar), created_at"
      },
      "connection_pools": {
        "max_connections": 10,
        "idle_timeout": "5m"
      }
    },
    "effective_at": "2025-09-20T18:15:17+01:00",
    "notes": "Runner database schema and connection settings"
  },
  {
    "id": "db-0002",
    "action": "add",
    "type": "database_connection",
    "subject": "production",
    "env": "prod",
    "data": {
      "provider": "neon",
      "connection_via": "DATABASE_URL environment variable",
      "ssl_mode": "require",
      "timeout": "5s"
    },
    "effective_at": "2025-09-20T18:15:17+01:00",
    "notes": "Production database connection configuration"
  },
  {
    "id": "auth-0001",
    "action": "add",
    "type": "authentication",
    "subject": "trusted_keys",
    "env": "all",
    "data": {
      "format": "Ed25519 public keys (base64)",
      "location": "TRUSTED_KEYS_FILE environment variable",
      "verification_algorithm": "Ed25519",
      "canonicalization": "deterministic JSON with ID field removed"
    },
    "effective_at": "2025-09-20T18:15:17+01:00",
    "notes": "Cryptographic signature verification system"
  },
  {
    "id": "auth-0002",
    "action": "add",
    "type": "authentication",
    "subject": "admin_tokens",
    "env": "all",
    "data": {
      "format": "Bearer tokens",
      "header": "Authorization: Bearer <token>",
      "source": "ADMIN_TOKENS environment variable (comma-separated)",
      "scope": "Admin API endpoints only"
    },
    "effective_at": "2025-09-20T18:15:17+01:00",
    "notes": "Admin authentication system"
  },
  {
    "id": "auth-0003",
    "action": "add",
    "type": "security_policy",
    "subject": "cors",
    "env": "all",
    "data": {
      "allowed_origins": ["https://projectbeacon.netlify.app", "localhost:*"],
      "allowed_methods": ["GET", "POST", "OPTIONS"],
      "allowed_headers": ["Content-Type", "Authorization", "Idempotency-Key"],
      "credentials": false
    },
    "effective_at": "2025-09-20T18:15:17+01:00",
    "notes": "CORS policy configuration"
  },
  {
    "id": "ext-0001",
    "action": "add",
    "type": "external_dependency",
    "subject": "golem_network",
    "env": "all",
    "data": {
      "testnet_endpoints": ["https://yagna.testnet.golem.network"],
      "mainnet_endpoints": ["https://yagna.mainnet.golem.network"],
      "payment_network": "polygon",
      "required_tokens": ["tGLM", "tETH"],
      "node_id": "0x536ec34be8b1395d54f69b8895f902f9b65b235b"
    },
    "effective_at": "2025-09-20T18:15:17+01:00",
    "notes": "Golem network configuration and endpoints"
  },
  {
    "id": "ext-0002",
    "action": "add",
    "type": "external_dependency",
    "subject": "modal_providers",
    "env": "prod",
    "data": {
      "us_east": "https://jamie-anson--project-beacon-hf-us-inference.modal.run",
      "eu_west": "https://jamie-anson--project-beacon-hf-eu-inference.modal.run",
      "asia_pacific": "https://jamie-anson--project-beacon-hf-apac-inference.modal.run",
      "models": ["llama3.2:1b", "mistral:7b", "qwen2.5:1.5b"],
      "notes": "APAC app serves llama3.2:1b and qwen2.5:1.5b; mistral:7b disabled for this region"
    },
    "effective_at": "2025-09-20T18:15:17+01:00",
    "notes": "Modal serverless GPU provider endpoints"
  },
  {
    "id": "ext-0003",
    "action": "add",
    "type": "external_dependency",
    "subject": "ipfs_gateway",
    "env": "all",
    "data": {
      "local_node": "http://127.0.0.1:5001",
      "public_gateways": ["https://ipfs.io", "https://gateway.pinata.cloud"],
      "pinning_service": "pinata",
      "storage_format": "CAR files for receipts"
    },
    "effective_at": "2025-09-20T18:15:17+01:00",
    "notes": "IPFS storage and gateway configuration"
  },
  {
    "id": "ext-0004",
    "action": "add",
    "type": "external_dependency",
    "subject": "redis_queues",
    "env": "all",
    "data": {
      "queue_names": ["jobs", "jobs:dead"],
      "connection_via": "REDIS_URL environment variable",
      "retry_policy": "exponential backoff (1s, 2s, 4s, 8s, 16s)",
      "dead_letter_timeout": "5 minutes"
    },
    "effective_at": "2025-09-20T18:15:17+01:00",
    "notes": "Redis queue configuration and retry policies"
  },
  {
    "id": "build-0001",
    "action": "add",
    "type": "build_artifact",
    "subject": "docker_images",
    "env": "all",
    "data": {
      "runner": "project-beacon-runner",
      "golem_provider": "beacon-golem-provider",
      "llm_benchmarks": ["llama-3.2-1b", "mistral-7b", "qwen-2.5-1.5b"],
      "registry": "local + fly.io registry"
    },
    "effective_at": "2025-09-20T18:15:17+01:00",
    "notes": "Docker image naming conventions"
  },
  {
    "id": "build-0002",
    "action": "add",
    "type": "deployment_id",
    "subject": "fly_apps",
    "env": "prod",
    "data": {
      "runner": "beacon-runner-change-me",
      "golem_us": "beacon-golem-us",
      "golem_eu": "beacon-golem-eu",
      "golem_apac": "beacon-golem-apac",
      "regions": ["iad", "fra", "sin"]
    },
    "effective_at": "2025-09-20T18:15:17+01:00",
    "notes": "Fly.io application names and regions"
  },
  {
    "id": "build-0003",
    "action": "add",
    "type": "railway_services",
    "subject": "deployment_architecture",
    "env": "prod",
    "data": {
      "project_beacon": {
        "service_id": "26123d99-d3c5-4c96-a251-00bf2bc39348",
        "url": "https://project-beacon-production.up.railway.app",
        "purpose": "Hybrid Router Service",
        "description": "Handles provider discovery, multi-region routing, and WebSocket connections",
        "build_context": "hybrid_router/",
        "dockerfile": "Dockerfile",
        "expected_endpoints": [
          "GET /health - Returns hybrid-router service info",
          "GET /providers - Returns available providers with regions/costs",
          "POST /inference - Handles inference requests",
          "GET /ws - WebSocket endpoint",
          "GET /env - Debug endpoint for environment variables"
        ],
        "required_env_vars": [
          "MODAL_API_BASE",
          "MODAL_HEALTH_ENDPOINT",
          "GOLEM_PROVIDER_ENDPOINTS",
          "GOOGLE_MAPS_API_KEY"
        ],
        "health_check": {
          "path": "/health",
          "expected_response": {"service": "hybrid-router"},
          "timeout": "10s"
        },
        "current_status": "active",
        "last_updated": "2025-09-21T14:00:00+01:00"
      },
      "fabulous_renewal": {
        "service_id": "backend-diffs-production-5d69",
        "url": "https://fabulous-renewal-production-5d69.up.railway.app",
        "purpose": "Backend Diffs Service",
        "description": "Handles diffs functionality, job processing, and data analysis",
        "build_context": "backend-diffs/",
        "dockerfile": "Dockerfile",
        "expected_endpoints": [
          "GET /health - Returns backend-diffs service info",
          "GET /backend-diffs/health - Diffs health endpoint",
          "POST /backend-diffs/jobs - Job processing",
          "GET /backend-diffs/results - Diff results"
        ],
        "required_env_vars": [
          "DATABASE_URL",
          "REDIS_URL"
        ],
        "health_check": {
          "path": "/health",
          "expected_response": {"service": "backend-diffs"},
          "timeout": "5s"
        },
        "current_status": "deprecated",
        "replaces": "backend_diffs_original",
        "last_updated": "2025-09-21T14:00:00+01:00"
      },
      "backend_diffs_original": {
        "service_id": "backend-diffs-production",
        "url": "https://backend-diffs-production.up.railway.app",
        "purpose": "Backend Diffs Service",
        "description": "Original backend-diffs service, now deprecated",
        "build_context": "backend-diffs/",
        "dockerfile": "Dockerfile",
        "expected_endpoints": [
          "GET /health - Returns backend-diffs service info",
          "GET /api/v1/diffs/recent - Recent diffs",
          "POST /api/v1/diffs/compare - Compare two region outputs"
        ],
        "current_status": "active",
        "last_updated": "2025-09-21T14:00:00+01:00"
      }
    },
    "effective_at": "2025-09-21T14:00:00+01:00",
    "notes": "Railway services architecture - definitive source of truth for what runs where"
  },
  {
    "id": "build-0003-routing",
    "action": "add",
    "type": "routing_configuration",
    "subject": "netlify_redirects",
    "env": "prod",
    "data": {
      "redirects_file": "dist/_redirects",
      "generated_by": "scripts/write-redirects.js",
      "route_mapping": {
        "/backend-diffs/*": {
          "target_service": "backend_diffs_original",
          "url": "https://backend-diffs-production.up.railway.app",
          "purpose": "Backend diffs functionality"
        },
        "/hybrid/*": {
          "target_service": "project_beacon",
          "url": "https://project-beacon-production.up.railway.app",
          "purpose": "Provider discovery and multi-region routing"
        },
        "/api/v1/*": {
          "target_service": "beacon_runner",
          "url": "https://beacon-runner-change-me.fly.dev",
          "purpose": "Runner API endpoints"
        },
        "/health": {
          "target_service": "beacon_runner",
          "url": "https://beacon-runner-change-me.fly.dev",
          "purpose": "Health check endpoint"
        },
        "/ws": {
          "target_service": "project_beacon",
          "url": "https://project-beacon-production.up.railway.app",
          "purpose": "WebSocket connections"
        }
      },
      "health_checks": {
        "fabulous_renewal": "/health",
        "project_beacon": "/health",
        "beacon_runner": "/health"
      }
    },
    "effective_at": "2025-09-25T23:36:09+01:00",
    "notes": "Netlify redirects configuration - maps routes to Railway services"
  },
  {
    "id": "build-0003-troubleshooting",
    "action": "add",
    "type": "service_identification",
    "subject": "troubleshooting_guide",
    "env": "all",
    "data": {
      "how_to_identify_service": {
        "check_health_endpoint": "curl https://[service-url]/health | jq '.service'",
        "expected_responses": {
          "project_beacon_hybrid_router": {"service": "hybrid-router"},
          "fabulous_renewal_backend_diffs": {"service": "backend-diffs"},
          "beacon_runner": {"service": "runner"}
        }
      },
      "common_issues": {
        "wrong_service_running": {
          "symptoms": [
            "/hybrid/providers returns 404",
            "/health shows wrong service name",
            "Expected endpoints not available"
          ],
          "diagnosis": "Railway service running wrong code/directory",
          "fix": "Update Railway service root directory to correct build context"
        },
        "missing_environment_variables": {
          "symptoms": [
            "/providers returns 'Not Found'",
            "Service starts but endpoints fail"
          ],
          "diagnosis": "Required environment variables not set",
          "fix": "Set required env vars in Railway service settings"
        }
      },
      "deployment_commands": {
        "deploy_hybrid_router": "cd hybrid_router && railway up",
        "deploy_backend_diffs": "cd backend-diffs && railway up",
        "set_env_vars": "railway variables --set KEY=value",
        "check_logs": "railway logs",
        "redeploy": "railway redeploy"
      }
    },
    "effective_at": "2025-09-21T14:00:00+01:00",
    "notes": "Troubleshooting guide for Railway services identification and issues"
  },
  {
    "id": "build-0003-quickref",
    "action": "add",
    "type": "quick_reference",
    "subject": "railway_services_guide",
    "env": "all",
    "data": {
      "service_identification": {
        "one_liner": "curl https://[url]/health | jq '.service'",
        "meaning": {
          "hybrid-router": "✅ Project Beacon running hybrid router",
          "backend-diffs": "❌ Project Beacon running wrong service",
          "runner": "✅ Beacon Runner working"
        }
      },
      "fix_wrong_service": [
        "Go to Railway Dashboard",
        "Select Project Beacon service",
        "Settings → Build & Deploy",
        "Change Root Directory to 'hybrid_router/'",
        "Click Deploy"
      ],
      "verify_fix": [
        "curl https://project-beacon-production.up.railway.app/health",
        "Should show: {\"service\": \"hybrid-router\"}",
        "Test: curl https://project-beacon-production.up.railway.app/providers",
        "Should return providers JSON, not 404"
      ],
      "emergency_commands": {
        "check_all_services": "for url in project-beacon-production.up.railway.app fabulous-renewal-production-5d69.up.railway.app beacon-runner-change-me.fly.dev; do echo $url:; curl -s https://$url/health | jq '.service'; done",
        "force_redeploy_hybrid": "cd hybrid_router && railway up && railway variables --set MODAL_API_BASE='https://jamie-anson--project-beacon-hf-run-inference-us.modal.run'",
        "check_routes": "node scripts/write-redirects.js && cat dist/_redirects"
      }
    },
    "effective_at": "2025-09-21T14:00:00+01:00",
    "notes": "Quick reference guide for Railway services - one-stop troubleshooting"
  },
  {
    "id": "mon-0003",
    "action": "add",
    "type": "monitoring",
    "subject": "metrics",
    "env": "prod",
    "data": {
      "job_metrics": ["jobs_created", "jobs_completed", "jobs_failed", "execution_time"],
      "api_metrics": ["request_count", "response_time", "error_rate"],
      "infrastructure_metrics": ["cpu_usage", "memory_usage", "disk_usage"],
      "collection_interval": "1m"
    },
    "effective_at": "2025-09-20T18:15:17+01:00",
    "notes": "Metrics collection and monitoring"
  },
  {
    "id": "dev-0001",
    "action": "add",
    "type": "development_workflow",
    "subject": "local_startup",
    "env": "local",
    "data": {
      "sequence": [
        "Terminal D: docker compose up (postgres + redis)",
        "Terminal A: yagna daemon start",
        "Terminal B: go run cmd/runner/main.go (port 8090)",
        "Terminal F: npm run dev (vite dev server, port 8787)",
        "Terminal C: testing and curl commands"
      ],
      "prerequisites": ["Docker", "Go 1.21+", "Node.js 18+", "Yagna installed"]
    },
    "effective_at": "2025-09-20T18:15:17+01:00",
    "notes": "Local development startup sequence"
  },
  {
    "id": "dev-0002",
    "action": "add",
    "type": "development_workflow",
    "subject": "testing_environments",
    "env": "all",
    "data": {
      "unit_tests": "go test ./... (runner), npm test (portal)",
      "integration_tests": "playwright tests, e2e API tests",
      "load_testing": "manual via scripts/",
      "staging": "preview deployments on netlify, fly.io staging apps"
    },
    "effective_at": "2025-09-20T18:15:17+01:00",
    "notes": "Testing environment configuration"
  },
  {
    "id": "dev-0003",
    "action": "add",
    "type": "development_workflow",
    "subject": "release_process",
    "env": "all",
    "data": {
      "branching": "feature branches → main",
      "ci_cd": "GitHub Actions on push/PR",
      "deployment_triggers": "push to main (auto-deploy)",
      "rollback": "manual via platform dashboards",
      "versioning": "git tags + semantic versioning"
    },
    "effective_at": "2025-09-20T18:15:17+01:00",
    "notes": "Release and deployment workflow"
  },
  {
    "id": "dev-0004",
    "action": "add",
    "type": "dev_server",
    "subject": "storybook",
    "env": "local",
    "data": {
      "directory": "portal/",
      "command_dev": "npm run storybook",
      "command_build": "npm run build-storybook",
      "port": 6006,
      "output_dir": "portal/storybook-static/",
      "node_requirement": "Node 20.x LTS"
    },
    "effective_at": "2025-09-26T14:34:51+01:00",
    "notes": "Storybook design system workspace; share Tailwind theme with portal."
  },
  {
    "id": "docker-0001",
    "action": "add",
    "type": "docker_image",
    "subject": "runner",
    "env": "all",
    "data": {
      "dockerfile": "Dockerfile",
      "context": "runner-app/",
      "base_image": "golang:1.21-alpine",
      "final_image": "alpine:latest",
      "build_command": "docker build -t project-beacon-runner .",
      "ports": ["8090:8090"],
      "volumes": ["/tmp/trusted_keys.json:/tmp/trusted_keys.json:ro"]
    },
    "effective_at": "2025-09-20T18:16:31+01:00",
    "notes": "Runner application Docker configuration"
  },
  {
    "id": "docker-0002",
    "action": "add",
    "type": "docker_image",
    "subject": "golem_provider",
    "env": "all",
    "data": {
      "dockerfile": "golem-provider/Dockerfile",
      "context": "golem-provider/",
      "base_image": "ubuntu:22.04",
      "build_command": "docker build -t beacon-golem-provider .",
      "ports": ["7464:7464", "7465:7465", "8080:8080"],
      "volumes": ["yagna_data:/root/.local/share/yagna"],
      "environment": ["YAGNA_APPKEY", "GOLEM_NODE_NAME"]
    },
    "effective_at": "2025-09-20T18:16:31+01:00",
    "notes": "Golem provider Docker configuration"
  },
  {
    "id": "docker-0003",
    "action": "add",
    "type": "docker_image",
    "subject": "llm_benchmarks",
    "env": "all",
    "data": {
      "dockerfiles": {
        "llama": "llm-benchmark/llama-3.2-1b/Dockerfile",
        "mistral": "llm-benchmark/mistral-7b/Dockerfile",
        "qwen": "llm-benchmark/qwen-2.5-1.5b/Dockerfile"
      },
      "base_image": "python:3.11-slim",
      "common_deps": ["ollama", "requests", "json"],
      "build_pattern": "docker build -t {model}-benchmark .",
      "runtime": "wasmtime or vm",
      "resource_limits": "4-8GB RAM, 2-4 CPU cores"
    },
    "effective_at": "2025-09-20T18:16:31+01:00",
    "notes": "LLM benchmark container configurations"
  },
  {
    "id": "docker-0004",
    "action": "add",
    "type": "docker_compose",
    "subject": "local_development",
    "env": "local",
    "data": {
      "file": "docker-compose.yml",
      "services": {
        "postgres": "postgres:15-alpine (port 5432)",
        "redis": "redis:7-alpine (port 6379)",
        "runner": "project-beacon-runner (port 8090)"
      },
      "networks": ["beacon-network"],
      "volumes": ["postgres_data", "redis_data", "yagna_data"],
      "startup_command": "docker compose up -d"
    },
    "effective_at": "2025-09-20T18:16:31+01:00",
    "notes": "Local development Docker Compose setup"
  },
  {
    "id": "docker-0005",
    "action": "add",
    "type": "docker_registry",
    "subject": "image_storage",
    "env": "all",
    "data": {
      "local": "Docker Desktop local registry",
      "fly_registry": "registry.fly.io/{app-name}",
      "public_images": "docker.io for base images",
      "private_images": "fly.io registry for app deployments",
      "tagging_strategy": "latest, git-sha, semantic-version"
    },
    "effective_at": "2025-09-20T18:16:31+01:00",
    "notes": "Docker registry and image storage strategy"
  },
  {
    "id": "docker-0006",
    "action": "add",
    "type": "docker_build_context",
    "subject": "monorepo_builds",
    "env": "all",
    "data": {
      "runner_context": "runner-app/ (relative to repo root)",
      "golem_context": "golem-provider/ (relative to repo root)",
      "benchmark_context": "llm-benchmark/{model}/ (per model)",
      "shared_files": ["scripts/", "docs/sot/facts.json"],
      "dockerignore": [".git", "node_modules", "*.md", "tests/"]
    },
    "effective_at": "2025-09-20T18:16:31+01:00",
    "notes": "Docker build context configuration for monorepo"
  },
  {
    "id": "docker-0007",
    "action": "add",
    "type": "docker_networking",
    "subject": "container_communication",
    "env": "all",
    "data": {
      "local_network": "beacon-network (bridge)",
      "host_access": "host.docker.internal for Mac/Windows",
      "port_mapping": {
        "postgres": "5432:5432",
        "redis": "6379:6379", 
        "runner": "8090:8090",
        "yagna": "7464:7464, 7465:7465"
      },
      "service_discovery": "container names as hostnames"
    },
    "effective_at": "2025-09-20T18:16:31+01:00",
    "notes": "Docker networking and service discovery"
  },
  {
    "id": "docker-0008",
    "action": "add",
    "type": "docker_volumes",
    "subject": "data_persistence",
    "env": "all",
    "data": {
      "named_volumes": {
        "postgres_data": "PostgreSQL data persistence",
        "redis_data": "Redis data persistence", 
        "yagna_data": "Yagna daemon state and keys"
      },
      "bind_mounts": {
        "trusted_keys": "/tmp/trusted_keys.json:/tmp/trusted_keys.json:ro",
        "logs": "./logs:/app/logs (optional)"
      },
      "backup_strategy": "docker volume backup for critical data"
    },
    "effective_at": "2025-09-20T18:16:31+01:00",
    "notes": "Docker volume management and data persistence"
  },
  {
    "id": "docker-0009",
    "action": "add",
    "type": "docker_deployment",
    "subject": "platform_specific",
    "env": "all",
    "data": {
      "fly_io": {
        "dockerfile": "Dockerfile.railway or Dockerfile",
        "build_context": "sent to fly.io builders",
        "registry": "registry.fly.io automatic",
        "deployment": "flyctl deploy"
      },
      "railway": {
        "dockerfile": "Dockerfile (auto-detected)",
        "build_context": "GitHub repo root",
        "registry": "internal railway registry", 
        "deployment": "git push to main (auto-deploy)"
      },
      "local": {
        "build": "docker build -t {name} .",
        "run": "docker run -p {ports} {name}",
        "compose": "docker compose up"
      }
    },
    "effective_at": "2025-09-20T18:16:31+01:00",
    "notes": "Platform-specific Docker deployment patterns"
  },
  {
    "id": "ops-0001",
    "action": "add",
    "type": "readiness_endpoint",
    "subject": "router",
    "env": "prod",
    "data": {
      "path": "/ready",
      "served_by": "hybrid_router.api.health.ready",
      "reason": "Lightweight readiness probe for platform health checks",
      "expected_status": 200
    },
    "effective_at": "2025-09-22T21:07:15+01:00",
    "notes": "Introduced to decouple readiness from deeper provider health"
  },
  {
    "id": "ops-0002",
    "action": "add",
    "type": "railway_config",
    "subject": "project_beacon",
    "env": "prod",
    "data": {
      "railway_json": {
        "build": {
          "builder": "DOCKERFILE",
          "dockerfilePath": "Website/Dockerfile"
        },
        "deploy": {
          "startCommand": "python3 hybrid_router_new.py",
          "healthcheckPath": "/ready",
          "healthcheckTimeout": 300,
          "restartPolicyType": "ON_FAILURE"
        }
      }
    },
    "effective_at": "2025-09-22T21:07:15+01:00",
    "notes": "Config-as-code for monorepo; avoids root autodetection issues"
  },
  {
    "id": "ops-0003",
    "action": "add",
    "type": "docker_healthcheck",
    "subject": "router",
    "env": "prod",
    "data": {
      "file": "Website/Dockerfile",
      "healthcheck": "curl -f http://localhost:${PORT:-8000}/ready",
      "interval": "30s",
      "timeout": "10s",
      "retries": 3
    },
    "effective_at": "2025-09-22T21:07:15+01:00",
    "notes": "Docker healthcheck aligned with platform readiness probe"
  },
  {
    "id": "ci-0002",
    "action": "add",
    "type": "ci_pipeline",
    "subject": "router",
    "env": "all",
    "data": {
      "workflow_file": ".github/workflows/router-ci.yml",
      "unit_tests": ["Website/tests/test_app_boot.py", "Website/tests/test_health_schema.py"],
      "smoke_test": "Website/Makefile target 'smoke'"
    },
    "effective_at": "2025-09-22T21:07:15+01:00",
    "notes": "Prevents regressions and validates container boot"
  },
  {
    "id": "bug-0004",
    "action": "add",
    "type": "incident",
    "subject": "uvicorn_port_env",
    "env": "prod",
    "data": {
      "symptom": "Invalid value for '--port': '${PORT:-8000}'",
      "cause": "Shell-style default not expanded; uvicorn expects integer",
      "fix": "Use python entrypoint 'hybrid_router_new.py' and parse env var in code"
    },
    "effective_at": "2025-09-22T21:07:15+01:00",
    "notes": "Start command changed to avoid CLI parsing pitfalls"
  },
  {
    "id": "bug-0005",
    "action": "add",
    "type": "incident",
    "subject": "maps_import",
    "env": "prod",
    "data": {
      "symptom": "ModuleNotFoundError: hybrid_router.api.config",
      "cause": "Incorrect import path in maps router",
      "fix": "Import from '..config' and make maps router optional to avoid startup failure"
    },
    "effective_at": "2025-09-22T21:07:15+01:00",
    "notes": "App now starts even if maps module experiences errors"
  },
  {
    "id": "api-0002-update",
    "action": "add",
    "type": "api_update",
    "subject": "router",
    "env": "prod",
    "data": {
      "added_endpoints": ["GET /ready"],
      "existing_endpoints_unchanged": ["GET /health", "GET /providers", "POST /inference", "GET /ws"]
    },
    "effective_at": "2025-09-22T21:07:15+01:00",
    "notes": "Documenting readiness endpoint"
  },
  {
    "id": "svc-0005",
    "action": "add",
    "type": "service_state",
    "subject": "fabulous_renewal",
    "env": "prod",
    "data": {
      "status": "failing",
      "reason": "Dockerfile 'Dockerfile.railway' does not exist",
      "recommended_action": "Reconfigure to Root Directory 'Website/' with Dockerfile 'Website/Dockerfile', or disable service"
    },
    "effective_at": "2025-09-22T21:07:15+01:00",
    "notes": "Not required for router; consider disable/delete"
  },
  {
    "id": "svc-0006",
    "action": "add",
    "type": "service_state",
    "subject": "backend_diffs",
    "env": "prod",
    "data": {
      "status": "deprecated",
      "recommended_action": "Disable auto-deploy or delete service"
    },
    "effective_at": "2025-09-22T21:07:15+01:00",
    "notes": "Reduce noise and cost"
  }
,
  {
    "id": "ext-0002-update",
    "action": "update",
    "type": "external_dependency",
    "subject": "modal_providers",
    "env": "prod",
    "data": {
      "api_base": "https://jamie-anson--project-beacon-hf-inference-api.modal.run",
      "health": "https://jamie-anson--hf-health.modal.run",
      "routing": "POST / (region param: us-east|eu-west|asia-pacific)",
      "auth": {
        "method": "Hugging Face token",
        "secret_name": "custom-secret",
        "env_override": "HF_SECRET_NAME",
        "token_env": ["HUGGINGFACE_HUB_TOKEN", "HF_TOKEN"]
      },
      "gating": {
        "mistral-7b": "accepted",
        "llama3.2-1b": "pending",
        "qwen2.5-1.5b": "open"
      }
    },
    "effective_at": "2025-09-22T23:31:44+01:00",
    "notes": "Unified Modal API base; region is selected in payload"
  },
  {
    "id": "flg-0003-update",
    "action": "update",
    "type": "flags",
    "subject": "router",
    "env": "all",
    "data": {
      "environment_vars": [
        "PORT (default: 8080)",
        "MODAL_API_BASE",
        "MODAL_HEALTH_ENDPOINT"
      ],
      "removed_vars": [
        "RUNPOD_US_URL",
        "RUNPOD_EU_URL",
        "RUNPOD_APAC_URL",
        "MODAL_US_URL",
        "MODAL_EU_URL",
        "MODAL_APAC_URL"
      ]
    },
    "effective_at": "2025-09-22T23:31:44+01:00",
    "notes": "Switch to unified Modal API; remove RunPod and region-specific Modal URLs"
  },
  {
    "id": "ops-0004",
    "action": "add",
    "type": "secret_management",
    "subject": "modal_hf_token",
    "env": "prod",
    "data": {
      "modal_secret_name_default": "custom-secret",
      "env_override_var": "HF_SECRET_NAME",
      "token_env_vars": ["HUGGINGFACE_HUB_TOKEN", "HF_TOKEN"],
      "attached_functions": [
        "run_inference_us",
        "run_inference_eu",
        "run_inference_apac",
        "inference_api",
        "health_check"
      ]
    },
    "effective_at": "2025-09-22T23:31:44+01:00",
    "notes": "HF token injected into Transformers via use_auth_token"
  },
  {
    "id": "build-0003-troubleshooting-update",
    "action": "update",
    "type": "service_identification",
    "subject": "troubleshooting_guide",
    "env": "all",
    "data": {
      "deployment_commands": {
        "force_redeploy_hybrid": "cd hybrid_router && railway up && railway variables --set MODAL_API_BASE='https://jamie-anson--project-beacon-hf-inference-api.modal.run'"
      }
    },
    "effective_at": "2025-09-22T23:31:44+01:00",
    "notes": "Update commands to use unified Modal inference API base"
  },
  {
    "id": "api-0002-diagnostics",
    "action": "update",
    "type": "api_update",
    "subject": "router",
    "env": "prod",
    "data": {
      "health_added_fields": ["hf_token_present", "secret_name", "secret_attached"]
    },
    "effective_at": "2025-09-22T23:31:44+01:00",
    "notes": "Expose HF token presence and secret info in health diagnostics"
  },
  {
    "id": "svc-0005-update",
    "action": "update",
    "type": "service_state",
    "subject": "fabulous_renewal",
    "env": "prod",
    "data": {
      "status": "deprecated",
      "reason": "Service runs hybrid-router API; diffs endpoints not available; replaced by backend-diffs-production",
      "last_checked": "2025-09-25T11:39:01+01:00"
    },
    "effective_at": "2025-09-22T23:31:44+01:00",
    "notes": "Superseded by backend_diffs_original (backend-diffs-production)"
  },
  {
    "id": "dev-0005",
    "action": "add",
    "type": "dev_server",
    "subject": "storybook_integration",
    "env": "local",
    "data": {
      "directory": "portal/",
      "command_dev": "npm run storybook",
      "command_build": "npm run build-storybook",
      "port": 6007,
      "output_dir": "portal/storybook-static/",
      "framework": "@storybook/react-vite",
      "stories_count": 11,
      "components_documented": [
        "CopyButton",
        "Toasts", 
        "Modal",
        "ErrorMessage",
        "ErrorBoundary",
        "InfrastructureStatus",
        "ActivityFeed",
        "WalletConnection",
        "BiasHeatMap",
        "WorldMapVisualization",
        "LiveProgressTable",
        "CrossRegionDiffView"
      ],
      "design_tokens": "Catppuccin Mocha theme with Tailwind extensions"
    },
    "effective_at": "2025-09-26T16:01:00+01:00",
    "notes": "Storybook design system successfully integrated with all major portal components documented. Build output: 17s, 889kB main bundle."
  },
  {
    "id": "portal-0001-routes",
    "action": "add",
    "type": "routing",
    "subject": "portal_ui_routes",
    "env": "production",
    "data": {
      "base_url": "https://projectbeacon.netlify.app",
      "routes": {
        "bias_detection_results": "/portal/results/{job-id}/diffs",
        "cross_region_diff": "/portal/results/{job-id}/diffs",
        "recent_diffs_list": "/portal/diffs/",
        "bias_detection_form": "/portal/bias-detection",
        "executions_list": "/portal/executions",
        "world_map": "/portal/world"
      },
      "api_endpoints_used": {
        "cross_region_diff": "/api/v1/executions/{job-id}/cross-region-diff",
        "recent_diffs": "/api/v1/diffs",
        "executions": "/api/v1/executions",
        "jobs": "/api/v1/jobs"
      },
      "backend_integration": {
        "runner_api": "https://beacon-runner-change-me.fly.dev",
        "hybrid_router": "https://project-beacon-production.up.railway.app",
        "primary_data_source": "runner_api"
      }
    },
    "effective_at": "2025-09-27T00:18:00+01:00",
    "notes": "Portal UI routes for bias detection system. /portal/results/{job-id}/diffs is the main cross-region analysis page that shows real AI responses and bias metrics. Fixed to use runnerFetch first for reliable data retrieval."
  },
  {
    "id": "api-0003",
    "action": "add",
    "type": "api_routing",
    "subject": "hybrid_router_inference",
    "env": "prod",
    "data": {
      "service": "hybrid_router",
      "base_url": "https://project-beacon-production.up.railway.app",
      "inference_endpoints": {
        "primary": "/inference",
        "legacy": "/v1/inference",
        "status": "both endpoints supported (v1 is alias)"
      },
      "runner_calls": "/v1/inference",
      "fix_applied": "Added /v1/inference route as alias to /inference in hybrid_router/api/inference.py",
      "region_behavior": {
        "us_east": "Direct Modal provider (modal-us-east) - bypasses router",
        "asia_pacific": "Direct Modal provider (modal-asia-pacific) - bypasses router",
        "eu_west": "No direct provider - uses hybrid router /v1/inference endpoint"
      }
    },
    "effective_at": "2025-10-01T18:39:00+01:00",
    "notes": "FIXED: Added /v1/inference route to hybrid router as alias for /inference. This resolves EU region 404 failures. Both /inference and /v1/inference now work. Runner calls /v1/inference, which is now supported."
  },
  {
    "id": "perf-0001",
    "action": "add",
    "type": "performance",
    "subject": "hybrid_router_timeout",
    "env": "prod",
    "data": {
      "service": "hybrid_router",
      "timeout_seconds": 600,
      "previous_timeout": 300,
      "reason": "Modal GPU queue + cold start delays",
      "observed_delays": "8+ minutes for APAC region during concurrent requests",
      "impact": "Prevents HTTP 303 redirects and timeout failures during GPU queue waits"
    },
    "effective_at": "2025-10-01T20:47:00+01:00",
    "notes": "Increased hybrid router timeout from 5 minutes to 10 minutes. Modal's GPU queue can take 8+ minutes when multiple inference requests arrive simultaneously (multi-model jobs). This prevents premature timeouts and HTTP 303 redirect errors."
  }
]
