name: Hybrid Router CI (Railway Preflight)

on:
  push:
    branches: [ main ]
    paths:
      - 'flyio-deployment/**'
      - 'Dockerfile.router'
      - 'hybrid_router.py'
      - 'hybrid_router/**'
      - 'requirements.txt'
      - 'modal-deployment/**'
      - 'railway.json'
      - '.github/workflows/railway.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'flyio-deployment/**'
      - 'Dockerfile.router'
      - 'hybrid_router.py'
      - 'hybrid_router/**'
      - 'requirements.txt'
      - 'modal-deployment/**'
      - 'railway.json'
  workflow_dispatch:

concurrency:
  group: router-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker-build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Inspect repo layout
        run: |
          echo "PWD=$(pwd)" 
          ls -la
          echo "== requirements.txt =="; test -f requirements.txt && head -n 20 requirements.txt || echo "missing"
          echo "== hybrid_router/ exists? =="; test -d hybrid_router && ls -la hybrid_router | head -n 50 || echo "missing"

      - name: Build hybrid-router image (no push)
        run: |
          DOCKER_BUILDKIT=1 docker build --progress=plain \
            -f Dockerfile.router \
            -t beacon-hybrid-router:ci \
            .

  post-deploy-healthcheck:
    # This job verifies the live Railway deployment after pushes to main.
    # Railway performs deployments via its GitHub integration on push.
    needs: [ docker-build ]
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Install curl and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Wait for Railway to roll out
        continue-on-error: true
        run: |
          set -e
          URL="https://project-beacon-production.up.railway.app/health"
          echo "Polling $URL for healthy status..."
          echo "Initial grace period (60s) to allow Railway to swap containers..."
          sleep 60
          for i in $(seq 1 36); do
            # Query /health with HTTP code and body
            HTTP_CODE=$(curl -sS -m 10 -w "%{http_code}" -o /tmp/health.json "$URL" || true)
            STATUS=$(jq -r .status /tmp/health.json 2>/dev/null || true)
            if [ "$HTTP_CODE" = "200" ] && [ "$STATUS" = "healthy" ]; then
              echo "Service healthy via /health (http=$HTTP_CODE)"; exit 0
            fi

            # Fallback to /ready
            READY_CODE=$(curl -sS -m 10 -w "%{http_code}" -o /tmp/ready.json "https://project-beacon-production.up.railway.app/ready" || true)
            READY=$(jq -r .status /tmp/ready.json 2>/dev/null || true)
            if [ "$READY_CODE" = "200" ] && { [ "$READY" = "ready" ] || [ "$READY" = "ok" ]; }; then
              echo "Service ready via /ready (http=$READY_CODE)"; exit 0
            fi

            echo "Attempt $i/36: health(code=$HTTP_CODE,status=$STATUS) ready(code=$READY_CODE,status=$READY)"; sleep 10
          done
          echo "Service did not become healthy in time"; echo "--- /health body ---"; cat /tmp/health.json || true; echo "--- /ready body ---"; cat /tmp/ready.json || true; exit 1

      - name: Check providers endpoint
        run: |
          curl -sSfL https://project-beacon-production.up.railway.app/providers | jq . | head -50 || true

      - name: Check WebSocket GET hint (non-upgrade)
        run: |
          curl -sSfL https://project-beacon-production.up.railway.app/ws | jq . || true
