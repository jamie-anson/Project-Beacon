name: Infinite Loop Detection

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'portal/src/**/*.jsx'
      - 'portal/src/**/*.js'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'portal/src/**/*.jsx'
      - 'portal/src/**/*.js'

jobs:
  detect-infinite-loops:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'portal/package-lock.json'
        
    - name: Install dependencies
      run: |
        cd portal
        npm ci
        
    - name: Run infinite loop detection tests
      run: |
        cd portal
        npm test -- --testPathPattern="infinite-loop" --verbose --no-coverage
        
    - name: Run useEffect pattern analysis
      run: |
        cd portal
        npm test -- --testPathPattern="useEffect-loop-detector" --verbose --no-coverage
        
    - name: Static analysis for loop patterns
      run: |
        cd portal/src
        echo "üîç Analyzing React components for infinite loop patterns..."
        
        # Check for common infinite loop patterns
        echo "Checking for object literals in useEffect dependencies..."
        if grep -r "useEffect.*\[.*{.*}.*\]" . --include="*.jsx" --include="*.js"; then
          echo "‚ùå Found object literals in useEffect dependencies"
          exit 1
        fi
        
        echo "Checking for array literals in useEffect dependencies..."
        if grep -r "useEffect.*\[.*\[.*\].*\]" . --include="*.jsx" --include="*.js"; then
          echo "‚ùå Found array literals in useEffect dependencies"
          exit 1
        fi
        
        echo "Checking for setState in useEffect with state in deps..."
        if grep -rE "useEffect.*set[A-Z]\w*.*\[.*[a-z]" . --include="*.jsx" --include="*.js"; then
          echo "‚ö†Ô∏è Found potential setState with state in dependencies"
        fi
        
        echo "Checking for WebSocket function dependencies..."
        if grep -rE "useEffect.*\[.*wsEnabled.*\]" . --include="*.jsx" --include="*.js"; then
          echo "‚ùå Found WebSocket function in useEffect dependencies (should be memoized)"
          exit 1
        fi
        
        echo "Checking for circular dependencies..."
        if grep -rE "useEffect.*\[.*connect.*\]" . --include="*.jsx" --include="*.js"; then
          echo "‚ùå Found potential circular dependency: useCallback/function in useEffect dependencies"
          exit 1
        fi
        
        echo "‚úÖ Static analysis complete"
        
    - name: Check for missing memoization
      run: |
        cd portal/src
        echo "üîç Checking for missing useMemo/useCallback..."
        
        # Find components with useEffect but no memoization
        for file in $(find . -name "*.jsx" -o -name "*.js"); do
          if grep -q "useEffect" "$file" && ! grep -q "useMemo\|useCallback" "$file"; then
            echo "‚ö†Ô∏è $file: Has useEffect but no memoization hooks"
          fi
        done
        
        echo "‚úÖ Memoization check complete"
        
    - name: Performance regression test
      run: |
        cd portal
        echo "üîç Running performance regression tests..."
        npm test -- --testPathPattern="infinite-loop-regression" --verbose --no-coverage
        
    - name: Comment on PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { execSync } = require('child_process');
          
          try {
            // Run static analysis and capture output
            const analysisOutput = execSync('cd portal/src && find . -name "*.jsx" -exec grep -l "useEffect" {} \\; | wc -l', { encoding: 'utf8' });
            const componentCount = parseInt(analysisOutput.trim());
            
            const comment = `## üîç Infinite Loop Detection Results
            
            **Components analyzed:** ${componentCount}
            **Status:** ‚úÖ No infinite loop patterns detected
            
            ### Checks performed:
            - ‚úÖ Object literals in useEffect dependencies
            - ‚úÖ Array literals in useEffect dependencies  
            - ‚úÖ setState with state in dependencies
            - ‚úÖ Missing memoization patterns
            - ‚úÖ Performance regression tests
            
            All components passed infinite loop detection! üéâ`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            const errorComment = `## üö® Infinite Loop Detection Failed
            
            **Error:** ${error.message}
            
            Please check the workflow logs for details and fix any infinite loop patterns before merging.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: errorComment
            });
          }
